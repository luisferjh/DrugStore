// <auto-generated />
using System;
using DrugStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DrugStore.Data.Migrations
{
    [DbContext(typeof(DbContextDrugStore))]
    [Migration("20190831015540_AddedMoreSeedDataProduct")]
    partial class AddedMoreSeedDataProduct
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DrugStore.Entities.Orders.OrderIncome", b =>
                {
                    b.Property<int>("IdOrderIncome")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOn");

                    b.Property<int>("IdProvider");

                    b.Property<int>("IdUser");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("State")
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(11,2)");

                    b.HasKey("IdOrderIncome");

                    b.HasIndex("IdProvider");

                    b.HasIndex("IdUser");

                    b.ToTable("OrderIncome");
                });

            modelBuilder.Entity("DrugStore.Entities.Orders.OrderIncomeDetails", b =>
                {
                    b.Property<int>("IdOrderIncomeDetails")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<DateTime>("DueDate");

                    b.Property<int>("IdOrderIncome");

                    b.Property<int>("IdProduct");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(11,2)");

                    b.HasKey("IdOrderIncomeDetails");

                    b.HasIndex("IdOrderIncome");

                    b.HasIndex("IdProduct");

                    b.ToTable("OrderIncomeDetails");
                });

            modelBuilder.Entity("DrugStore.Entities.Sales.Delivery", b =>
                {
                    b.Property<int>("IdSale");

                    b.Property<string>("Adress")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<DateTime>("DateOn");

                    b.Property<int>("IdClient");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdSale");

                    b.HasIndex("IdClient");

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("DrugStore.Entities.Sales.Sale", b =>
                {
                    b.Property<int>("IdSale")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOn");

                    b.Property<int?>("IdClient");

                    b.Property<int>("IdUser");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(11,2)");

                    b.Property<string>("TypeSale")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("VoucherNumber")
                        .IsRequired()
                        .HasColumnType("varchar(10)");

                    b.Property<string>("VoucherSeries")
                        .IsRequired()
                        .HasColumnType("varchar(7)");

                    b.HasKey("IdSale");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdUser");

                    b.ToTable("Sale");
                });

            modelBuilder.Entity("DrugStore.Entities.Sales.SaleDetail", b =>
                {
                    b.Property<int>("IdSaleDetail")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(11,2)");

                    b.Property<int>("IdProduct");

                    b.Property<int>("IdSale");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(11,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(11,2)");

                    b.HasKey("IdSaleDetail");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdSale");

                    b.ToTable("SaleDetail");
                });

            modelBuilder.Entity("DrugStore.Entities.Store.Category", b =>
                {
                    b.Property<int>("IdCategory")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Condition");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdCategory");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            IdCategory = 1,
                            Condition = true,
                            Description = "productos de caracter generico",
                            Name = "Generico"
                        },
                        new
                        {
                            IdCategory = 2,
                            Condition = true,
                            Description = "productos de caracter comercial",
                            Name = "Comercial"
                        });
                });

            modelBuilder.Entity("DrugStore.Entities.Store.Laboratory", b =>
                {
                    b.Property<int>("IdLaboratory")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Condition");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("LaboratoryName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdLaboratory");

                    b.ToTable("Laboratory");

                    b.HasData(
                        new
                        {
                            IdLaboratory = 1,
                            Condition = true,
                            Description = "Bayer es una compañía de innovación que investiga en las áreas de Ciencias de la Vida centradas en la salud y la agricultura.",
                            LaboratoryName = "Bayer"
                        },
                        new
                        {
                            IdLaboratory = 2,
                            Condition = true,
                            Description = "Somos un grupo empresarial colombiano de reconocido liderazgo en la industria farmacéutica y de consumo masivo, comprometido desde hace más de 80 años con el crecimiento económico y el avance social de nuestro país",
                            LaboratoryName = "Tecnoquimicas"
                        },
                        new
                        {
                            IdLaboratory = 3,
                            Condition = true,
                            Description = "Genfar es una empresa que creció con el compromiso de fabricar y llevar medicamentos de calidad a cada vez más personas",
                            LaboratoryName = "Genfar"
                        },
                        new
                        {
                            IdLaboratory = 4,
                            Condition = true,
                            Description = "ofrecemos soluciones de salud innovadoras en una amplia gama de afecciones de salud: ya sea una afección común como un resfriado, alergias, problemas digestivos o afecciones graves tales como el cáncer o la esclerosis múltiple",
                            LaboratoryName = "Sanofi"
                        });
                });

            modelBuilder.Entity("DrugStore.Entities.Store.LossDetail", b =>
                {
                    b.Property<int>("IdDetailLosses")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount");

                    b.Property<int>("IdLosses");

                    b.Property<int>("IdProduct");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(11,2)");

                    b.HasKey("IdDetailLosses");

                    b.HasIndex("IdLosses");

                    b.HasIndex("IdProduct");

                    b.ToTable("LossDetail");
                });

            modelBuilder.Entity("DrugStore.Entities.Store.Losses", b =>
                {
                    b.Property<int>("IdLosses")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Cause")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("DateOn");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdLosses");

                    b.ToTable("Losses");
                });

            modelBuilder.Entity("DrugStore.Entities.Store.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BarCode")
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("Condition");

                    b.Property<int>("IdCategory");

                    b.Property<int>("IdLaboratory");

                    b.Property<string>("Indicative")
                        .HasColumnType("varchar(250)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(11,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Stock");

                    b.HasKey("IdProduct");

                    b.HasIndex("IdCategory");

                    b.HasIndex("IdLaboratory");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            IdProduct = 1,
                            BarCode = "sdfsdf",
                            Condition = true,
                            IdCategory = 1,
                            IdLaboratory = 2,
                            Indicative = "tabletas, 3 al dia",
                            Price = 1000m,
                            ProductName = "Acetaminofen",
                            Stock = 100
                        },
                        new
                        {
                            IdProduct = 2,
                            BarCode = "sdfsdf",
                            Condition = true,
                            IdCategory = 1,
                            IdLaboratory = 1,
                            Indicative = "tabletas",
                            Price = 4000m,
                            ProductName = "Trimebutina",
                            Stock = 10
                        },
                        new
                        {
                            IdProduct = 3,
                            BarCode = "",
                            Condition = true,
                            IdCategory = 2,
                            IdLaboratory = 4,
                            Indicative = "Liquido",
                            Price = 5000m,
                            ProductName = "Dolex",
                            Stock = 10
                        },
                        new
                        {
                            IdProduct = 4,
                            BarCode = "",
                            Condition = true,
                            IdCategory = 2,
                            IdLaboratory = 4,
                            Indicative = "Tableta",
                            Price = 3000m,
                            ProductName = "Dolex",
                            Stock = 45
                        },
                        new
                        {
                            IdProduct = 5,
                            BarCode = "",
                            Condition = true,
                            IdCategory = 1,
                            IdLaboratory = 1,
                            Indicative = "Tableta",
                            Price = 2500m,
                            ProductName = "Albendazol",
                            Stock = 15
                        },
                        new
                        {
                            IdProduct = 6,
                            BarCode = "",
                            Condition = true,
                            IdCategory = 2,
                            IdLaboratory = 2,
                            Indicative = "Polvo",
                            Price = 6000m,
                            ProductName = "Velgolax",
                            Stock = 5
                        },
                        new
                        {
                            IdProduct = 7,
                            BarCode = "",
                            Condition = true,
                            IdCategory = 2,
                            IdLaboratory = 3,
                            Indicative = "Tableta",
                            Price = 3000m,
                            ProductName = "Pirantel",
                            Stock = 12
                        },
                        new
                        {
                            IdProduct = 8,
                            BarCode = "",
                            Condition = true,
                            IdCategory = 1,
                            IdLaboratory = 4,
                            Indicative = "Tableta",
                            Price = 1500m,
                            ProductName = "Naproxeno",
                            Stock = 25
                        },
                        new
                        {
                            IdProduct = 9,
                            BarCode = "",
                            Condition = true,
                            IdCategory = 1,
                            IdLaboratory = 3,
                            Indicative = "Ampolla",
                            Price = 1750m,
                            ProductName = "Betametasona",
                            Stock = 10
                        },
                        new
                        {
                            IdProduct = 10,
                            BarCode = "",
                            Condition = true,
                            IdCategory = 2,
                            IdLaboratory = 4,
                            Indicative = "Tableta",
                            Price = 1800m,
                            ProductName = "Advil Max",
                            Stock = 10
                        },
                        new
                        {
                            IdProduct = 11,
                            BarCode = "",
                            Condition = true,
                            IdCategory = 2,
                            IdLaboratory = 1,
                            Indicative = "Tableta",
                            Price = 1300m,
                            ProductName = "Descongel",
                            Stock = 10
                        });
                });

            modelBuilder.Entity("DrugStore.Entities.Users.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Condition");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DocumentType")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdClient");

                    b.ToTable("Client");

                    b.HasData(
                        new
                        {
                            IdClient = 1,
                            Condition = true,
                            DocumentNumber = "1065789741",
                            DocumentType = "CC",
                            LastName = "Mendoza",
                            Name = "Juan",
                            PhoneNumber = "3005698741"
                        },
                        new
                        {
                            IdClient = 2,
                            Condition = true,
                            DocumentNumber = "1065852654",
                            DocumentType = "CC",
                            LastName = "Quintero",
                            Name = "Andres",
                            PhoneNumber = "3011235689"
                        });
                });

            modelBuilder.Entity("DrugStore.Entities.Users.Provider", b =>
                {
                    b.Property<int>("IdProvider")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(70)");

                    b.Property<string>("DocumentNumber")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdProvider");

                    b.ToTable("Provider");

                    b.HasData(
                        new
                        {
                            IdProvider = 1,
                            PhoneNumber = "3005007070",
                            ProviderName = "Copydroga"
                        },
                        new
                        {
                            IdProvider = 2,
                            PhoneNumber = "32253457070",
                            ProviderName = "DyDMendicamentos"
                        },
                        new
                        {
                            IdProvider = 3,
                            PhoneNumber = "3005006670",
                            ProviderName = "Distribuciones pastor julio"
                        },
                        new
                        {
                            IdProvider = 4,
                            PhoneNumber = "3015237070",
                            ProviderName = "Distribuciones La Fe"
                        });
                });

            modelBuilder.Entity("DrugStore.Entities.Users.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Condition");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("varchar(30)");

                    b.HasKey("IdRole");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("DrugStore.Entities.Users.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("varchar(70)");

                    b.Property<bool>("Condition");

                    b.Property<DateTime>("DateOn");

                    b.Property<string>("DocumentNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(70)");

                    b.Property<int>("IdRole");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(250);

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("varchar(20)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdUser");

                    b.HasIndex("IdRole");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DrugStore.Entities.Orders.OrderIncome", b =>
                {
                    b.HasOne("DrugStore.Entities.Users.Provider", "Provider")
                        .WithMany("OrderIncomes")
                        .HasForeignKey("IdProvider")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrugStore.Entities.Users.User", "User")
                        .WithMany("OrderIncomes")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DrugStore.Entities.Orders.OrderIncomeDetails", b =>
                {
                    b.HasOne("DrugStore.Entities.Orders.OrderIncome", "OrderIncome")
                        .WithMany("OrderIncomeDetails")
                        .HasForeignKey("IdOrderIncome")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrugStore.Entities.Store.Product", "Product")
                        .WithMany("OrderIncomeDetails")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DrugStore.Entities.Sales.Delivery", b =>
                {
                    b.HasOne("DrugStore.Entities.Users.Client", "Client")
                        .WithMany("Deliveries")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrugStore.Entities.Sales.Sale", "Sale")
                        .WithOne("Delivery")
                        .HasForeignKey("DrugStore.Entities.Sales.Delivery", "IdSale")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DrugStore.Entities.Sales.Sale", b =>
                {
                    b.HasOne("DrugStore.Entities.Users.Client", "Client")
                        .WithMany("Sales")
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrugStore.Entities.Users.User", "User")
                        .WithMany("Sales")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DrugStore.Entities.Sales.SaleDetail", b =>
                {
                    b.HasOne("DrugStore.Entities.Store.Product", "Products")
                        .WithMany("SaleDetails")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrugStore.Entities.Sales.Sale", "Sale")
                        .WithMany("SaleDetails")
                        .HasForeignKey("IdSale")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DrugStore.Entities.Store.LossDetail", b =>
                {
                    b.HasOne("DrugStore.Entities.Store.Losses", "Losses")
                        .WithMany("LossDetails")
                        .HasForeignKey("IdLosses")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DrugStore.Entities.Store.Product", "Product")
                        .WithMany("LossDetails")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DrugStore.Entities.Store.Product", b =>
                {
                    b.HasOne("DrugStore.Entities.Store.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("IdCategory")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DrugStore.Entities.Store.Laboratory", "Laboratory")
                        .WithMany("Products")
                        .HasForeignKey("IdLaboratory")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("DrugStore.Entities.Users.User", b =>
                {
                    b.HasOne("DrugStore.Entities.Users.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
